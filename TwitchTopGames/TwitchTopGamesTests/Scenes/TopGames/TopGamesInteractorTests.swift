//
//  TopGamesInteractorTests.swift
//  TwitchTopGames
//
//  Created by mazza on 20/09/19.
//  Copyright (c) 2019 fbassi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TwitchTopGames
import XCTest

class TopGamesInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: TopGamesInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupTopGamesInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupTopGamesInteractor() {
        sut = TopGamesInteractor()
    }
    
    // MARK: Test doubles
    
    class TopGamesPresentationLogicSpy: TopGamesPresentationLogic {
        
        var presentTopGamesCalled = false
        func presentTopGames(response: TopGames.Get.Response?) {
            presentTopGamesCalled = true
        }
    }
    
    class MockTopGamesWorker: TopGamesWorker {
        
        var fetchTopGamesCalled = false
        var request: TopGames.Get.Request?
        
        override func fetchTopGames(request: TopGames.Get.Request, completionHandler: @escaping (Result<TopGames.Get.Response, APIError>) -> Void) {
            fetchTopGamesCalled = true
            self.request = request
            let response = TopGames.Get.Response(total: nil, top: nil)
            completionHandler(Result.success(response))
        }
    }
    
    // MARK: Tests
    
    func testPassingParameters() {
        // Given
        let worker = MockTopGamesWorker()
        sut.worker = worker
        
        // Given
        let request = TopGames.Get.Request(service: .getTopGames(limit: 25, offset: 0))
        sut.getTopGames(request: request)
        
        // Then
        XCTAssert(worker.request != nil, "It should have called with the right request")
    }
    
    func testGetTopGamesWithLimit25AndOffset0() {
        //Given
        let spy = TopGamesPresentationLogicSpy()
        sut.presenter = spy
        sut.worker = MockTopGamesWorker()
        let request = TopGames.Get.Request(service: .getTopGames(limit: 25, offset: 0))
        
        //When
        sut.getTopGames(request: request)
        
        //Then
        XCTAssertTrue(spy.presentTopGamesCalled, "getTopGames(request:) should ask the presenter to format the result")
    }
}
